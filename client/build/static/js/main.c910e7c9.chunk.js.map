{"version":3,"sources":["Logo.svg","Components/Header/Header.jsx","Components/Error404.jsx","Components/Loading.jsx","Components/Dashboard/ChakraDataShower.jsx","Components/Dashboard/Dashboard.jsx","Functions/getUserData.js","App.js","Redux/Reducers/userData.js","Redux/Reducers/tempStates.js","Redux/store.js","index.js"],"names":["Header","contractETH","useContext","requiredInfo","mainUserData","useSelector","state","data","isMetamask","dispatch","useDispatch","history","useHistory","searchUser","a","chakraId","document","getElementsByClassName","value","trim","chakras","chakrasData","creator","startTime","_hex","endTime","baseValue","creatorShare","isTrulyRandom","winner","showParticipants","id","participants","type","payload","push","alert","window","location","reload","checkIsEnter","e","key","className","innerWidth","to","style","color","src","Logo","alt","onClick","placeholder","onKeyDown","address","substring","href","Error404","Loading","ChakraDataShower","searchedUserData","useEffect","init","undefined","chakraData","getProperDate","unfilteredDate","months","tempDate","Date","curDate","getFullYear","getDate","getMonth","getHours","getMinutes","parseInt","ethers","utils","formatEther","map","i","Dashboard","operationsData","isActivitiesShower","chakraIdData","useParams","hideGuidelines","classList","contains","remove","opacity","changeOperation","operationIndex","add","tempOperationData","JSON","parse","stringify","selectedOperation","unSelectedOperations","showResponse","message","isValid","responseShower","innerText","replace","performOperation","operationNum","getElementById","baseAmount","creatorShares","baseAmountETH","parseEther","error","confirm","clicked","createChakra","res","console","log","wait","reason","joinChakra","endChakra","distributeFunds","display","text","activities","length","slice","reverse","marginBottom","event","amount","time","num","name","decoder","AbiCoder","getUserData","userAddress","provider","tempAddress","userData","getLogs","fromBlock","topics","logsData","j","tempData","filteredData","decode","createContext","App","useState","setContractETH","isLoading","ethereum","on","providers","Web3Provider","send","signer","getSigner","process","contract","Contract","ChakraABI","getAddress","getDefaultProvider","wallet","Wallet","connect","Provider","exact","path","createReducer","setMainUserData","action","setSearchedUserData","setIsMetamask","setIsLoading","setOperationsData","setIsActivitiesShower","setChakraId","store","configureStore","reducer","ReactDOM","render"],"mappings":"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","file":"static/js/main.c910e7c9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Logo.5cea7059.svg\";","import React, { useContext } from 'react';\r\nimport { requiredInfo } from \"../../App\";\r\nimport { FaSearch } from \"react-icons/fa\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport Logo from \"../../Logo.svg\";\r\nconst Header = () => {\r\n\r\n    const contextData = useContext(requiredInfo);\r\n    const contractETH = contextData.contractETH;\r\n    let mainUserData = useSelector(state => state.mainUserData.data);\r\n    let isMetamask = useSelector(state => state.isMetamask.data);\r\n    let dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const searchUser = async () => {\r\n        if (contractETH !== null) {\r\n            let chakraId = document.getElementsByClassName(\"searchBarInp\")[0].value.trim();\r\n            if (chakraId !== \"\") {\r\n                try {\r\n                    let chakrasData = await contractETH.chakras(chakraId);\r\n                    if (chakrasData.creator !== \"0x0000000000000000000000000000000000000000\") {\r\n                        chakrasData = {\r\n                            id: chakraId,\r\n                            creator: chakrasData.creator,\r\n                            startTime: chakrasData.startTime._hex * 1000,\r\n                            endTime: chakrasData.endTime._hex * 1000,\r\n                            baseValue: chakrasData.baseValue._hex,\r\n                            creatorShare: chakrasData.creatorShare._hex,\r\n                            isTrulyRandom: chakrasData.isTrulyRandom,\r\n                            winner: chakrasData.winner._hex,\r\n                            participants: await contractETH.showParticipants(chakraId)\r\n                        }\r\n                        dispatch({ type: \"setSearchedUserData\", payload: chakrasData });\r\n                        history.push(\"/\" + chakraId);\r\n                    } else {\r\n                        alert(\"Chakra Not Exists\");\r\n                    }\r\n                } catch (error) {\r\n                    alert(\"Something Went Wrong\");\r\n                    window.location.reload();\r\n                }\r\n            } else {\r\n                alert(\"Search Field Is Empty\");\r\n            }\r\n        } else {\r\n            alert(\"Something Went Wrong\");\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    const checkIsEnter = async (e) => {\r\n        if (e.key === \"Enter\") {\r\n            await searchUser();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"headerMainDiv\">\r\n                <div className=\"subHeaderDiv\">\r\n                    {\r\n                        window.innerWidth > 890 ?\r\n                            <div className=\"headingText\">\r\n                                <Link to=\"/\">\r\n                                    <div className=\"subHeadingText\">\r\n                                        VARt <span style={{ color: \"#61dafb\" }}>Chakra</span>\r\n                                    </div>\r\n                                </Link>\r\n                            </div>\r\n                            : <Link to=\"/\">\r\n                                <img src={Logo} className=\"chakraLogoImg\" alt=\"\" />\r\n                            </Link>\r\n                    }\r\n                    <div className=\"searchBar\">\r\n                        <FaSearch onClick={() => searchUser()} />\r\n                        <input type=\"number\" placeholder=\"Search By Chakra Id\" className=\"searchBarInp\" onKeyDown={(e) => checkIsEnter(e)} />\r\n                    </div>\r\n                    <div className=\"userAccount\">\r\n                        {\r\n                            isMetamask === null ?\r\n                                <></> :\r\n                                isMetamask === true ?\r\n                                    mainUserData === null ?\r\n                                        <div onClick={() => {\r\n                                            window.location.reload();\r\n                                        }} className=\"subUserAccount\">Wait..</div> :\r\n                                        <Link to=\"/\">\r\n                                            <div className=\"subUserAccount\">{mainUserData.address.substring(0, 5) + \"...\" + mainUserData.address.substring(39, 41)}</div>\r\n                                        </Link> :\r\n                                    <div onClick={() => {\r\n                                        window.location.href = \"https://metamask.io/\"\r\n                                    }} className=\"subUserAccount\">Add Wallet</div>\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\";\r\n\r\nconst Error404 = () => {\r\n    return (\r\n        <>\r\n            <div className=\"div1\">\r\n                <div className=\"subMainDivError404\">\r\n                    <div className=\"div2\">\r\n                        <div className=\"op40 err1\">\r\n                            <h1>4</h1>\r\n                        </div>\r\n                        <div className=\"op41 err1\">\r\n                            <h1>0</h1>\r\n                        </div>\r\n                        <div className=\"op42 err1\">\r\n                            <h1>4</h1>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"message1\">\r\n                        <h1>Something Went Wrong</h1>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Error404;","import React from \"react\";\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <>\r\n            <div className=\"mainLoader\">\r\n                <div className=\"subLoader\">\r\n                    <div className=\"loaderText\">V</div>\r\n                </div>\r\n                <div className=\"animatorDiv\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Loading;","import React, { useEffect, useContext } from 'react';\r\nimport { requiredInfo } from \"../../App\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ethers } from 'ethers';\r\nimport Error404 from \"../Error404\";\r\nimport Loading from '../Loading';\r\n\r\nconst ChakraDataShower = () => {\r\n    const contextData = useContext(requiredInfo);\r\n    const contractETH = contextData.contractETH;\r\n    let searchedUserData = useSelector(state => state.searchedUserData.data);\r\n    let chakraId = useSelector(state => state.chakraId.data);\r\n    let dispatch = useDispatch();\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            if (searchedUserData === null && chakraId !== null && chakraId !== undefined && contractETH !== null) {\r\n                try {\r\n                    let chakrasData = await contractETH.chakras(chakraId);\r\n                    if (chakrasData.creator !== \"0x0000000000000000000000000000000000000000\") {\r\n                        let chakraData = {\r\n                            id: chakraId,\r\n                            creator: chakrasData.creator,\r\n                            startTime: chakrasData.startTime._hex * 1000,\r\n                            endTime: chakrasData.endTime._hex * 1000,\r\n                            baseValue: chakrasData.baseValue._hex,\r\n                            creatorShare: chakrasData.creatorShare._hex,\r\n                            isTrulyRandom: chakrasData.isTrulyRandom,\r\n                            winner: chakrasData.winner._hex,\r\n                            participants: await contractETH.showParticipants(chakraId)\r\n                        }\r\n                        dispatch({ type: \"setSearchedUserData\", payload: chakraData });\r\n                    } else {\r\n                        dispatch({ type: \"setSearchedUserData\", payload: { creator: \"0x0000000000000000000000000000000000000000\" } });\r\n                    }\r\n                } catch (error) {\r\n                    alert(\"Something Went Wrong\");\r\n                    window.location.reload();\r\n                }\r\n            }\r\n        }\r\n        init();\r\n    })\r\n\r\n    const getProperDate = (unfilteredDate) => {\r\n        let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n        let tempDate = new Date(unfilteredDate);\r\n        let curDate = new Date();\r\n        if (curDate.getFullYear() > tempDate.getFullYear()) {\r\n            return tempDate.getDate() + \"th \" + months[tempDate.getMonth()] + \" \" + tempDate.getFullYear();\r\n        } else if (curDate.getMonth() > tempDate.getMonth() || curDate.getDate() > tempDate.getDate()) {\r\n            return tempDate.getDate() + \"th \" + months[tempDate.getMonth()];\r\n        } else {\r\n            return tempDate.getHours() + \":\" + tempDate.getMinutes();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                searchedUserData !== null ?\r\n                    searchedUserData.creator !== \"0x0000000000000000000000000000000000000000\" ?\r\n                        <>\r\n                            <div className=\"mainDataShowerDiv\">\r\n                                <div className=\"subDataShowerDiv\">\r\n                                    <div className=\"chakraIdShower\">{searchedUserData.id}</div>\r\n                                    <div className=\"chakraDataShower\">\r\n                                        <div className=\"chakraData\"><span>Creator</span> <span className=\"mainChakarData\">{searchedUserData.creator}</span></div>\r\n                                        <div className=\"chakraData\"><span>Start Time</span> <span className=\"mainChakarData\">{getProperDate(searchedUserData.startTime)}</span></div>\r\n                                        <div className=\"chakraData\"><span>End Time</span> <span className=\"mainChakarData\">{parseInt(searchedUserData.endTime) === 0 ? \"-\" : getProperDate(searchedUserData.endTime)}</span></div>\r\n                                        <div className=\"chakraData\"><span>Base Value</span> <span className=\"mainChakarData\">{ethers.utils.formatEther(searchedUserData.baseValue)} ETH</span></div>\r\n                                        <div className=\"chakraData\"><span>Creator Share</span> <span className=\"mainChakarData\">{parseInt(searchedUserData.creatorShare)}%</span></div>\r\n                                        <div className=\"chakraData\"><span>Truly Random</span> <span className=\"mainChakarData\">{searchedUserData.isTrulyRandom === true ? \"Yes\" : \"No\"}</span></div>\r\n                                        <div className=\"chakraData\"><span>Winner</span> <span className=\"mainChakarData\">{parseInt(searchedUserData.winner) === 0 ? \"-\" : parseInt(searchedUserData.winner)}</span></div>\r\n                                        <div className=\"chakraData\">\r\n                                            <span>Participants</span>\r\n                                            <div className=\"participantsAddress\">\r\n                                                {\r\n                                                    searchedUserData.participants.map((data, i) => (\r\n                                                        <span key={i} className=\"mainChakarData\">{data}</span>\r\n                                                    ))\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </> : <Error404 />\r\n                    : <Loading />\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChakraDataShower;","import React, { useEffect, useContext } from 'react';\r\nimport { requiredInfo } from \"../../App\";\r\nimport { FiMoreVertical } from \"react-icons/fi\";\r\nimport { HiBadgeCheck } from \"react-icons/hi\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ethers } from 'ethers';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport ChakraDataShower from './ChakraDataShower';\r\n\r\nconst Dashboard = () => {\r\n\r\n    const contextData = useContext(requiredInfo);\r\n    const contractETH = contextData.contractETH;\r\n    let operationsData = useSelector(state => state.operationsData.data);\r\n    let isActivitiesShower = useSelector(state => state.isActivitiesShower.data);\r\n    let mainUserData = useSelector(state => state.mainUserData.data);\r\n    let isMetamask = useSelector(state => state.isMetamask.data);\r\n    let chakraIdData = useSelector(state => state.chakraId.data);\r\n    let dispatch = useDispatch();\r\n    let history = useHistory()\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            if (chakraIdData === null || chakraIdData !== chakraId) {\r\n                dispatch({ type: \"setChakraId\", payload: chakraId });\r\n            }\r\n        }\r\n        init();\r\n    })\r\n\r\n    let { chakraId } = useParams();\r\n\r\n    const hideGuidelines = () => {\r\n        if (document.getElementsByClassName(\"responseShower\")[0] !== undefined) {\r\n            if (document.getElementsByClassName(\"responseShower\")[0].classList.contains(\"showWarning\") === true) {\r\n                document.getElementsByClassName(\"responseShower\")[0].classList.remove(\"showWarning\")\r\n            } else if (document.getElementsByClassName(\"responseShower\")[0].classList.contains(\"showDone\") === true) {\r\n                document.getElementsByClassName(\"responseShower\")[0].classList.remove(\"showDone\")\r\n            }\r\n            document.getElementsByClassName(\"responseText\")[0].style.opacity = \"0\"\r\n        }\r\n    }\r\n\r\n    const changeOperation = (operationIndex) => {\r\n        dispatch({ type: \"setIsActivitiesShower\", payload: false });\r\n        document.getElementsByClassName(\"joinOrCreateBTN\")[0].classList.add(\"currentOptionShower\");\r\n        document.getElementsByClassName(\"activitiesBTN\")[0].classList.remove(\"currentOptionShower\");\r\n        hideGuidelines();\r\n        let tempOperationData = JSON.parse(JSON.stringify(operationsData));\r\n        tempOperationData.selectedOperation = operationsData.unSelectedOperations[operationIndex];\r\n        tempOperationData.unSelectedOperations[operationIndex] = operationsData.selectedOperation;\r\n        dispatch({ type: \"setOperationsData\", payload: tempOperationData })\r\n    }\r\n\r\n    const showResponse = (message, isValid) => {\r\n        let responseShower = document.getElementsByClassName(\"responseShower\")[0];\r\n        document.getElementsByClassName(\"responseText\")[0].style.opacity = \"1\";\r\n        document.getElementsByClassName(\"responseText\")[0].innerText = message;\r\n        if (isValid === true) {\r\n            if (responseShower.classList.contains(\"showWarning\") === true) {\r\n                responseShower.classList.replace(\"showWarning\", \"showDone\");\r\n            } else if (responseShower.classList.contains(\"showDone\") !== true) {\r\n                responseShower.classList.add(\"showDone\")\r\n            }\r\n        }\r\n        else {\r\n            if (responseShower.classList.contains(\"showDone\") === true) {\r\n                responseShower.classList.replace(\"showDone\", \"showWarning\");\r\n            } else if (responseShower.classList.contains(\"showWarning\") !== true) {\r\n                responseShower.classList.add(\"showWarning\")\r\n            }\r\n        }\r\n    }\r\n\r\n    const selectIsTrulyRandom = () => {\r\n        if (document.getElementsByClassName(\"isTrulyRandomInp\")[0].clicked === true) {\r\n            document.getElementsByClassName(\"showCheckIcon\")[0].style.display = \"none\";\r\n            document.getElementsByClassName(\"isTrulyRandomInp\")[0].clicked = false;\r\n        } else {\r\n            document.getElementsByClassName(\"showCheckIcon\")[0].style.display = \"block\";\r\n            document.getElementsByClassName(\"isTrulyRandomInp\")[0].clicked = true;\r\n        }\r\n    }\r\n\r\n    const performOperation = async (operationNum) => {\r\n        if (contractETH !== null && isMetamask !== false) {\r\n            let chakraId = document.getElementById(\"chakraIdInp\").value.trim();\r\n            if (chakraId !== \"\") {\r\n                if (operationNum === 0) {\r\n                    let baseAmount = document.getElementById(\"amountInp\").value.trim();\r\n                    let creatorShares = document.getElementById(\"creatorShare\").value.trim()\r\n                    if (baseAmount === \"\" || creatorShares === \"\") {\r\n                        showResponse(\"Fill All Details\", false);\r\n                    } else {\r\n                        if (creatorShares >= 100) {\r\n                            showResponse(\"Creators Share Should Less Than 100%\", false);\r\n                        } else if (creatorShares % 1 !== 0) {\r\n                            showResponse(\"Share Amount Should Not In Float\", false);\r\n                        } else {\r\n                            let baseAmountETH;\r\n                            try {\r\n                                baseAmountETH = ethers.utils.parseEther(baseAmount);\r\n                            } catch (error) {\r\n                                showResponse(\"Base Value Is Too Small\", false);\r\n                            }\r\n                            try {\r\n                                if (window.confirm(\"Are You Sure\") === true) {\r\n                                    dispatch({ type: \"setIsLoading\", payload: true });\r\n                                    let isTrulyRandom = false;\r\n                                    if (document.getElementsByClassName(\"isTrulyRandomInp\")[0].clicked === true) {\r\n                                        isTrulyRandom = true;\r\n                                    }\r\n                                    let res = await contractETH.createChakra(chakraId, baseAmountETH._hex, creatorShares, isTrulyRandom, { value: baseAmountETH._hex });\r\n                                    console.log(res);\r\n                                    console.log(await res.wait());\r\n                                    showResponse(\"Done\", true);\r\n                                    window.location.reload();\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                                showResponse(error.reason, false);\r\n                                dispatch({ type: \"setIsLoading\", payload: false });\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (operationNum === 1) {\r\n                    let baseAmount = document.getElementById(\"amountInp\").value.trim();\r\n                    if (baseAmount === \"\") {\r\n                        showResponse(\"Fill All Details\", false);\r\n                    } else {\r\n                        let baseAmountETH;\r\n                        try {\r\n                            baseAmountETH = ethers.utils.parseEther(baseAmount);\r\n                        } catch (error) {\r\n                            showResponse(\"Base Value Is Too Small\", false);\r\n                        }\r\n                        try {\r\n                            if (window.confirm(\"Are You Sure\") === true) {\r\n                                dispatch({ type: \"setIsLoading\", payload: true });\r\n                                let res = await contractETH.joinChakra(chakraId, { value: baseAmountETH._hex });\r\n                                console.log(res);\r\n                                console.log(await res.wait());\r\n                                showResponse(\"Done\", true);\r\n                                window.location.reload();\r\n                            }\r\n                        } catch (error) {\r\n                            console.log(error)\r\n                            showResponse(error.reason, false);\r\n                            dispatch({ type: \"setIsLoading\", payload: false });\r\n                        }\r\n                    }\r\n                } else if (operationNum === 2) {\r\n                    try {\r\n                        if (window.confirm(\"Are You Sure\") === true) {\r\n                            dispatch({ type: \"setIsLoading\", payload: true });\r\n                            let res = await contractETH.endChakra(chakraId);\r\n                            console.log(res);\r\n                            console.log(await res.wait());\r\n                            showResponse(\"Done\", true);\r\n                            window.location.reload();\r\n                        }\r\n                    } catch (error) {\r\n                        console.log(error)\r\n                        showResponse(error.reason, false);\r\n                        dispatch({ type: \"setIsLoading\", payload: false });\r\n                    }\r\n                } else if (operationNum === 3) {\r\n                    try {\r\n                        if (window.confirm(\"Are You Sure\") === true) {\r\n                            dispatch({ type: \"setIsLoading\", payload: true });\r\n                            let res = await contractETH.distributeFunds(chakraId);\r\n                            console.log(res);\r\n                            console.log(await res.wait());\r\n                            showResponse(\"Done\", true);\r\n                            window.location.reload();\r\n                        }\r\n                    } catch (error) {\r\n                        console.log(error)\r\n                        showResponse(error.reason, false);\r\n                        dispatch({ type: \"setIsLoading\", payload: false });\r\n                    }\r\n                }\r\n            } else {\r\n                showResponse(\"Fill All Details\", false);\r\n            }\r\n        } else {\r\n            showResponse(\"Something Went Wrong\", false);\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    const getProperDate = (unfilteredDate) => {\r\n        let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n        let tempDate = new Date(unfilteredDate);\r\n        let curDate = new Date();\r\n        if (curDate.getFullYear() > tempDate.getFullYear()) {\r\n            return tempDate.getDate() + \"th \" + months[tempDate.getMonth()] + \" \" + tempDate.getFullYear();\r\n        } else if (curDate.getMonth() > tempDate.getMonth() || curDate.getDate() > tempDate.getDate()) {\r\n            return tempDate.getDate() + \"th \" + months[tempDate.getMonth()];\r\n        } else {\r\n            return tempDate.getHours() + \":\" + tempDate.getMinutes();\r\n        }\r\n    }\r\n\r\n    const changeCurOperationShower = () => {\r\n        if (document.getElementsByClassName(\"joinOrCreateBTN\")[0] !== undefined) {\r\n            document.getElementsByClassName(\"joinOrCreateBTN\")[0].classList.remove(\"currentOptionShower\")\r\n            document.getElementsByClassName(\"activitiesBTN\")[0].classList.add(\"currentOptionShower\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                chakraId === undefined ?\r\n                    isMetamask === true ?\r\n                        <div className=\"mainDashboardDiv\">\r\n                            <div className=\"subDashboardDiv\">\r\n                                <div className=\"optionShower\">\r\n                                    <div onClick={() => {\r\n                                        document.getElementsByClassName(\"moreOptionShowerDiv\")[0].style.display === \"block\" ?\r\n                                            document.getElementsByClassName(\"moreOptionShowerDiv\")[0].style.display = \"none\" :\r\n                                            document.getElementsByClassName(\"moreOptionShowerDiv\")[0].style.display = \"block\"\r\n                                    }} className=\"moreOptionShowerIcon\"><FiMoreVertical /></div>\r\n                                    <div onClick={() => {\r\n                                        dispatch({ type: \"setIsActivitiesShower\", payload: false })\r\n                                        document.getElementsByClassName(\"joinOrCreateBTN\")[0].classList.add(\"currentOptionShower\")\r\n                                        document.getElementsByClassName(\"activitiesBTN\")[0].classList.remove(\"currentOptionShower\")\r\n\r\n                                    }} className=\"joinOrCreateBTN optionHeader currentOptionShower\">{operationsData.selectedOperation.text}</div>\r\n                                    <div onClick={() => {\r\n                                        dispatch({ type: \"setIsActivitiesShower\", payload: true })\r\n                                    }} className=\"activitiesBTN optionHeader\">Activities</div>\r\n                                </div>\r\n                                <div className=\"moreOptionShowerDiv\">\r\n                                    <div onClick={() => changeOperation(0)} className=\"moreOptions\">{operationsData.unSelectedOperations[0].text}</div>\r\n                                    <div onClick={() => changeOperation(1)} className=\"moreOptions\">{operationsData.unSelectedOperations[1].text}</div>\r\n                                    <div onClick={() => changeOperation(2)} className=\"moreOptions\">{operationsData.unSelectedOperations[2].text}</div>\r\n                                </div>\r\n                                <div className=\"joinInpTaker\">\r\n                                    {\r\n                                        isActivitiesShower === true ?\r\n                                            <>\r\n                                                {changeCurOperationShower()}\r\n                                                {\r\n                                                    mainUserData === null || mainUserData.activities.length < 1 ?\r\n                                                        <>\r\n                                                            <div className=\"noActivityShower\">\r\n                                                                <span style={{ color: \"white\" }}>No</span> Activities\r\n                                                            </div>\r\n                                                        </> :\r\n                                                        mainUserData.activities.slice(0).reverse().map((data, i) => (\r\n                                                            <div key={i} onClick={() => {\r\n                                                                history.push(`/${data.id}`)\r\n                                                            }} className=\"activityShower\" style={\r\n                                                                i === mainUserData.activities.length - 1 ?\r\n                                                                    { marginBottom: \"2rem\" } : null}>\r\n                                                                <span className=\"idShowerInAc\" style={{ color: \"#61dafb\" }}>#{data.id} {data.event}</span>\r\n                                                                <span className=\"baseValueShowerInAc\" style={{ color: \"#b2b9d2\" }}>{ethers.utils.formatEther(data.amount)} ETH</span>\r\n                                                                <span >{getProperDate(data.time)}</span>\r\n                                                            </div>\r\n                                                        ))\r\n                                                }\r\n                                            </> :\r\n                                            <>\r\n                                                <div onClick={() => {\r\n                                                    hideGuidelines()\r\n                                                }} className=\"responseShower\"><span className=\"responseText\" >Something Went Wrong</span></div>\r\n                                                {\r\n                                                    operationsData.selectedOperation.num === 0 ?\r\n                                                        <>\r\n                                                            <input type=\"number\" name=\"chakraIdInp\" id=\"chakraIdInp\" placeholder=\"New Chakra Id\" />\r\n                                                            <input type=\"number\" name=\"amountInp\" id=\"amountInp\" placeholder=\"Base Amount In ETH\" />\r\n                                                            <input type=\"number\" name=\"creatorShare\" id=\"creatorShare\" placeholder=\"Your Share In %\" />\r\n                                                            <button onClick={() => selectIsTrulyRandom()} className=\"isTrulyRandomInp\">Is Truly Random <HiBadgeCheck className=\"showCheckIcon\" /></button>\r\n                                                        </> :\r\n                                                        operationsData.selectedOperation.num === 1 ?\r\n                                                            <>\r\n                                                                <input type=\"number\" name=\"chakraIdInp\" id=\"chakraIdInp\" placeholder=\"Chakra Id\" />\r\n                                                                <input type=\"number\" name=\"amountInp\" id=\"amountInp\" placeholder=\"Entrance Amount\" />\r\n                                                            </>\r\n                                                            : <> <input type=\"number\" name=\"chakraIdInp\" id=\"chakraIdInp\" placeholder=\"Chakra Id\" /></>\r\n                                                }\r\n\r\n                                                <div onClick={() => performOperation(operationsData.selectedOperation.num)} className=\"joinSubmitBTN\">\r\n                                                    {operationsData.selectedOperation.text}\r\n                                                </div>\r\n                                            </>\r\n                                    }\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div> :\r\n                        <>\r\n                            <div className=\"installMetamaskShower\">\r\n                                <div className=\"showMetamaskIMGAndLink\">\r\n                                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/MetaMask_Fox.svg/800px-MetaMask_Fox.svg.png\" alt=\"\" />\r\n                                    <span onClick={() => {\r\n                                        window.location.href = \"https://metamask.io/\"\r\n                                    }}>Install Metamask</span>\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    : <ChakraDataShower />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Dashboard","import {\r\n    ethers\r\n} from \"ethers\";\r\nconst decoder = new ethers.utils.AbiCoder();\r\nconst getUserData = async (userAddress, provider) => {\r\n\r\n    let tempAddress = \"0x000000000000000000000000\" + userAddress.substring(2, 63) // For Filtering Logs Data We Need Vales Of 64 Bytes And Here We Are Converting Users Address To 64 Bytes Or 0x+64 Characters Containing Address.\r\n    let userData = {\r\n        address: userAddress,\r\n        activities: []\r\n    }\r\n\r\n    let logsData = await provider.getLogs({ // Getting Users Data From Logs By Filtering Through Users Address And Smart Contract Address And This Filter Query Will Return All Event Data Or Logs Data That Have Users Address In Second Positions Or Satisfies Filter Query For More Info Check \"getUserDataInOrganizedManner.js\" File.\r\n        fromBlock: 10695679,\r\n        address: \"0x48585eeFa3F9F09Aeab61A7b1755334cD60EE9DA\",\r\n        topics: [\r\n            null,\r\n            tempAddress\r\n        ]\r\n    })\r\n\r\n    for (let j = 0; j < logsData.length; j++) {\r\n        let tempData = {\r\n            id: parseInt(logsData[j].topics[2])\r\n        };\r\n        let filteredData = decoder.decode([\"uint\", \"uint\"], logsData[j].data)\r\n        tempData.amount = filteredData[0]._hex;\r\n        tempData.time = filteredData[1]._hex * 1000;\r\n        if (logsData[j].topics[0] === \"0xfe5133a58bfdbf378a348cd21a520ae48b8ce706fe9001f759e7855d86848a0f\") {\r\n            tempData.event = \"Created\";\r\n        } else if (logsData[j].topics[0] === \"0x807a257f74005839b8e5a55539e1007ed7c947a1f5fffd13a6cda97f46270e27\") {\r\n            tempData.event = \"Joined\";\r\n        } else {\r\n            tempData.event = \"Wins\";\r\n        }\r\n        userData.activities.push(tempData);\r\n    }\r\n\r\n    return userData;\r\n}\r\n\r\nexport default getUserData;","import React, { useState, useEffect, createContext } from 'react'\nimport { ethers } from \"ethers\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ChakraABI from \"./Contract/chakraABI.json\";\nimport Header from './Components/Header/Header';\nimport Dashboard from \"./Components/Dashboard/Dashboard\";\nimport Loading from \"./Components/Loading\";\nimport Error404 from \"./Components/Error404\";\nimport getUserData from \"./Functions/getUserData.js\";\nimport { Switch, Route } from \"react-router-dom\"\n\nconst requiredInfo = createContext();\n\nconst App = () => {\n\n  const [contractETH, setContractETH] = useState(null);\n  const dispatch = useDispatch();\n  let isLoading = useSelector(state => state.isLoading.data);\n\n  const reloadPage = () => {\n    window.location.reload();\n  }\n\n  if (window.ethereum) { // This Statement Will Caught When Account Will Changed In Metamask.\n    window.ethereum.on('accountsChanged', () => reloadPage());\n  }\n\n  useEffect(() => {\n    const init = async () => {\n      if ((window.ethereum !== undefined)) { // This Statement Checks That Whether User Have Metamask Or Not,  \n        dispatch({ type: \"setIsMetamask\", payload: true });\n        const provider = new ethers.providers.Web3Provider(\n          window.ethereum\n        );\n        await provider.send(\"eth_requestAccounts\", []); // It Will Send Request For Connecting To Metamask.\n        const signer = provider.getSigner();\n        const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\n        let contract = new ethers.Contract(contractAddress, ChakraABI, signer);\n        setContractETH(contract);\n        try {\n          dispatch({ type: \"setMainUserData\", payload: await getUserData(await signer.getAddress(), provider) });\n          dispatch({ type: \"setIsLoading\", payload: false })\n        } catch (error) {\n          console.log(error);\n        }\n      } else {\n        dispatch({ type: \"setIsLoading\", payload: false })\n        dispatch({ type: \"setIsMetamask\", payload: false })\n        let provider = ethers.getDefaultProvider(\"rinkeby\");\n        // let provider = new InfuraProvider(\"ropsten\");\n        let wallet = new ethers.Wallet(process.env.REACT_APP_WALLET_KEY);\n        let signer = wallet.connect(provider)\n        const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\n        let contract = new ethers.Contract(contractAddress, ChakraABI, signer);\n        setContractETH(contract)\n      }\n    }\n    init();\n  }, [])\n\n  return (\n    <>\n      <requiredInfo.Provider value={{\n        contractETH: contractETH\n      }}>\n        <Header />\n        <Switch>\n          <Route exact path='/:chakraId?'>\n            <Dashboard />\n          </Route>\n          <Route>\n            <Error404 />\n          </Route>\n        </Switch>\n      </requiredInfo.Provider>\n      <div className=\"subBackground\"></div>\n      {\n        isLoading === true ? <Loading /> : <></>\n      }\n    </>\n  )\n}\n\nexport default App\nexport { requiredInfo };\n","import {\r\n    createReducer\r\n} from \"@reduxjs/toolkit\";\r\n\r\nexport const mainUserData = createReducer({\r\n    data: null\r\n}, {\r\n    setMainUserData: (state, action) => {\r\n        state.data = action.payload\r\n    }\r\n})\r\n\r\nexport const searchedUserData = createReducer({\r\n    data: null\r\n}, {\r\n    setSearchedUserData: (state, action) => {\r\n        state.data = action.payload\r\n    }\r\n})","import {\r\n    createReducer\r\n} from \"@reduxjs/toolkit\";\r\n\r\nexport const isMetamask = createReducer({\r\n    data: null\r\n}, {\r\n    setIsMetamask: (state, action) => {\r\n        state.data = action.payload;\r\n    }\r\n})\r\n\r\nexport const isLoading = createReducer({\r\n    data: true\r\n}, {\r\n    setIsLoading: (state, action) => {\r\n        state.data = action.payload;\r\n    }\r\n})\r\n\r\nexport const operationsData = createReducer({\r\n    data: {\r\n        selectedOperation: {\r\n            num: 1,\r\n            text: \"Join\"\r\n        },\r\n        unSelectedOperations: [{\r\n            num: 0,\r\n            text: \"Create\"\r\n        }, {\r\n            num: 2,\r\n            text: \"End\"\r\n        }, {\r\n            num: 3,\r\n            text: \"Distribution\"\r\n        }]\r\n    }\r\n}, {\r\n    setOperationsData: (state, action) => {\r\n        state.data = action.payload;\r\n    }\r\n})\r\n\r\nexport const isActivitiesShower = createReducer({\r\n    data: false\r\n}, {\r\n    setIsActivitiesShower: (state, action) => {\r\n        state.data = action.payload;\r\n    }\r\n})\r\n\r\nexport const chakraId = createReducer({\r\n    data: null\r\n}, {\r\n    setChakraId: (state, action) => {\r\n        state.data = action.payload;\r\n    }\r\n})","import {\r\n    configureStore\r\n} from '@reduxjs/toolkit';\r\nimport {\r\n    mainUserData,\r\n    searchedUserData\r\n} from './Reducers/userData';\r\n\r\nimport {\r\n    isMetamask,\r\n    isLoading,\r\n    operationsData,\r\n    isActivitiesShower,\r\n    chakraId\r\n} from './Reducers/tempStates';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        mainUserData: mainUserData,\r\n        searchedUserData: searchedUserData,\r\n        isMetamask: isMetamask,\r\n        isLoading: isLoading,\r\n        operationsData: operationsData,\r\n        isActivitiesShower: isActivitiesShower,\r\n        chakraId: chakraId\r\n    }\r\n    //, // Enable It For Stopping From Showing UnSerialize Data Error\r\n    // middleware: getDefaultMiddleware =>\r\n    //     getDefaultMiddleware({\r\n    //         serializableCheck: false,\r\n    //     })\r\n})","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport \"./App.css\"\nimport { store } from \"./Redux/store.js\";\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <BrowserRouter>\n     <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}